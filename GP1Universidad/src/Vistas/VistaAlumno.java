/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import java.sql.*;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.mariadb.jdbc.Connection;
import persistencia.miConexion;

/**
 *
 * @author lucio
 */
public class VistaAlumno extends javax.swing.JInternalFrame {
    
    private DefaultTableModel modelo= new DefaultTableModel();
    private int estado;
    
    /**
     * Creates new form VistaAlumno
     */
    public VistaAlumno() {
        initComponents();
        cabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jbInsertar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbAlta = new javax.swing.JButton();
        jbBaja = new javax.swing.JButton();
        jtDni = new javax.swing.JTextField();
        jtNombre = new javax.swing.JTextField();
        jtApellido = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtAlumnos = new javax.swing.JTable();
        jbMostrar = new javax.swing.JButton();
        jdNacimiento = new com.toedter.calendar.JDateChooser();
        jrActivo = new javax.swing.JRadioButton();
        jrInactivo = new javax.swing.JRadioButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Alumno");

        jbInsertar.setText("Insertar");
        jbInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbInsertarActionPerformed(evt);
            }
        });

        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbAlta.setText("Dar de Alta");
        jbAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAltaActionPerformed(evt);
            }
        });

        jbBaja.setText("Dar de Baja");
        jbBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBajaActionPerformed(evt);
            }
        });

        jtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtApellidoActionPerformed(evt);
            }
        });

        jLabel2.setText("DNI:");

        jLabel3.setText("Nombre:");

        jLabel4.setText("Apellido:");

        jLabel5.setText("Estado:");

        jLabel6.setText("Fecha de Nac:");

        jtAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jtAlumnos);

        jbMostrar.setText("Mostrar Alumnos");
        jbMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMostrarActionPerformed(evt);
            }
        });

        jrActivo.setText("Activo");
        jrActivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrActivoActionPerformed(evt);
            }
        });

        jrInactivo.setText("Inactivo");
        jrInactivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrInactivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbInsertar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbAlta, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(jbBaja, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jrActivo)
                                .addGap(18, 18, 18)
                                .addComponent(jrInactivo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jdNacimiento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(285, 285, 285)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbInsertar)
                    .addComponent(jtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbActualizar)
                    .addComponent(jtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbBorrar)
                    .addComponent(jtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbAlta)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbBaja)
                            .addComponent(jLabel5)
                            .addComponent(jrActivo)
                            .addComponent(jrInactivo))
                        .addGap(18, 18, 18)
                        .addComponent(jbMostrar)
                        .addGap(25, 25, 25)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jdNacimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtApellidoActionPerformed

    private void jbInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbInsertarActionPerformed
        try {
            
            insertarAlumno();
            
        } catch (SQLException ex) {
        
        }
    }//GEN-LAST:event_jbInsertarActionPerformed

    private void jbMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMostrarActionPerformed
        // TODO add your handling code here:
        mostrarAlumnos ();
    }//GEN-LAST:event_jbMostrarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
                
       String dni = jtDni.getText();
        
         if (dni.isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "Ingrese el documento del Alumno que desee borrar.");
            return;
        } else {
             
            borrarAlumnos();
         }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jrActivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrActivoActionPerformed
        // TODO add your handling code here:
        
        if (jrActivo.isSelected()) {
            
            jrInactivo.setSelected(false);
            estado = 1;
        }

    }//GEN-LAST:event_jrActivoActionPerformed

    private void jrInactivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrInactivoActionPerformed
        // TODO add your handling code here:
        
         if (jrInactivo.isSelected()) {
            
            jrActivo.setSelected(false);
            estado = 0;
        }

    }//GEN-LAST:event_jrInactivoActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:
        
        String dni = jtDni.getText();
        
         if (dni.isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "Ingrese el documento del Alumno que desee Actualizar.");
            return;
        } else {
             
             actualizarAlumnos();
         } 
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAltaActionPerformed
        // TODO add your handling code here:
        String dni = jtDni.getText();
        
         if (dni.isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "Ingrese el documento del Alumno que desee Dar la Alta.");
            return;
        } else {
             
             darDeAlta();
         }
    }//GEN-LAST:event_jbAltaActionPerformed

    private void jbBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBajaActionPerformed
        // TODO add your handling code here:
        String dni = jtDni.getText();
        
         if (dni.isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "Ingrese el documento del Alumno que desee Dar la Baja.");
            return;
        } else {
             
             darDeBaja();
         }
    }//GEN-LAST:event_jbBajaActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbAlta;
    private javax.swing.JButton jbBaja;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbInsertar;
    private javax.swing.JButton jbMostrar;
    private com.toedter.calendar.JDateChooser jdNacimiento;
    private javax.swing.JRadioButton jrActivo;
    private javax.swing.JRadioButton jrInactivo;
    private javax.swing.JTable jtAlumnos;
    private javax.swing.JTextField jtApellido;
    private javax.swing.JTextField jtDni;
    private javax.swing.JTextField jtNombre;
    // End of variables declaration//GEN-END:variables

    private void cabecera(){
        
        modelo.addColumn("ID Alumno");
        modelo.addColumn("Nombre");
        modelo.addColumn("Apellido");
        modelo.addColumn("DNI");
        modelo.addColumn("Fecha de Nacimiento");
        modelo.addColumn("Estado");
        jtAlumnos.setModel(modelo);
    }
    private void insertarAlumno() throws SQLException{
        
        String nombre = jtNombre.getText();
        String apellido = jtApellido.getText();
        
        if (nombre.isEmpty() && apellido.isEmpty() || (!jrActivo.isSelected() && !jrInactivo.isSelected()) ) {
            
            JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios" );
            
            return;        
        } else {
        
            int dni;
        
            try{
            
                dni = Integer.parseInt(jtDni.getText());
            } catch (NumberFormatException ex){
            
                JOptionPane.showMessageDialog(this, "DNI invalido. Ingrese solo numeros.");
                return;
            }
        
            Date fechaUtil = jdNacimiento.getDate();
            java.sql.Date fechaSql = null;
        
            if (fechaUtil != null) {
            
                fechaSql = new java.sql.Date(fechaUtil.getTime());
            }
        
            int activo = estado;
        
            String sql = "INSERT INTO alumno (nombre, apellido, dni, fechaNacimiento, estado) VALUES(?, ?, ?, ?, ?)";
        
            try (Connection con = (Connection) miConexion.getmiConexion();
                    PreparedStatement ps = con.prepareStatement(sql)){
            
                ps.setString(1, nombre);
                ps.setString(2, apellido);
                ps.setInt(3, dni);
                ps.setDate(4, fechaSql);
                ps.setInt(5, activo);
            
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Alumno insertado correctamente.");
                limpiarCampos();
            
            }catch (SQLException ex){
            
                JOptionPane.showMessageDialog(this, "Error al insertar alumno: " + ex);
            }
        } 
    }
    
    private void actualizarAlumnos(){
        
        int dni;
        
        try {
  
            dni = Integer.parseInt(jtDni.getText());
        
        } catch (NumberFormatException e){
            
            JOptionPane.showMessageDialog(this, "El DNI debe ser un numero entero.");
            return;
        }
        
        if (jtNombre.getText().isEmpty() || jtApellido.getText().isEmpty() || jtDni.getText().isEmpty()) {
            
            JOptionPane.showMessageDialog(this, "Por Favor Complete todos los campos obligatorios. Campos Incompletos");
            return;
        }
        
        
        
        int confirmar = JOptionPane.showConfirmDialog(this, "¿Esta Seguro de Actualizar el alumno con DNI " + dni + "?" , 
                " Confirmar Actualizacion:", JOptionPane.YES_NO_OPTION);
        
            if (confirmar == JOptionPane.YES_OPTION) {
            
                String nombre = jtNombre.getText();
                String apellido = jtApellido.getText();
                
                
                Date fechaUtil = jdNacimiento.getDate();
                java.sql.Date fechaSql = null;
        
                if (fechaUtil != null) {
            
                    fechaSql = new java.sql.Date(fechaUtil.getTime());
                }
                
                
                String sql = "UPDATE alumno SET nombre= ?, apellido = ?, fechaNacimiento = ? WHERE dni= ?";
                
                try (Connection con = (Connection) miConexion.getmiConexion()){
                    PreparedStatement ps = con.prepareStatement(sql);
                    
                   ps.setString(1, nombre);
                   ps.setString(2, apellido);
                   ps.setDate(3, fechaSql);
                   ps.setInt(4, dni);
                    
                    int filas = ps.executeUpdate();
                    
                    if (filas > 0) {
                        
                        JOptionPane.showMessageDialog(this, "Alumno Actualizado correctamente.");
                        limpiarCampos ();
                        mostrarAlumnos();
                    } else {
                        
                        JOptionPane.showMessageDialog(this, "No se encontro un alumno con ese DNI.");
                    }
                
            } catch (SQLException ex){
                
                JOptionPane.showMessageDialog(this, "Error al Actualizar alumno: " + ex);
            } catch (Exception e) {
                
                JOptionPane.showMessageDialog(this, "ERROR: " + e);
            }
        }
        
    }
    
    private void borrarAlumnos (){
        
        int dni;
        
        try {
            
            dni = Integer.parseInt(jtDni.getText());

        } catch (NumberFormatException e){
            
            JOptionPane.showMessageDialog(this, "El DNI debe ser un numero entero.");
            return;
        }   
        
        int confirmar = JOptionPane.showConfirmDialog(this, "¿Esta Seguro de eliminar el alumno con DNI " + dni + "?" , 
                " Confirmar borrado", JOptionPane.YES_NO_OPTION);
        
        if (confirmar == JOptionPane.YES_OPTION) {
            
            String sql = "DELETE FROM alumno WHERE dni = ?";
            
            try (Connection con = (Connection) miConexion.getmiConexion()){
                    PreparedStatement ps = con.prepareStatement(sql);
                    
                    ps.setInt(1, dni);
                    
                    int filas = ps.executeUpdate();
                    
                    if (filas > 0) {
                        
                        JOptionPane.showMessageDialog(this, "Alumno borrado correctamente.");
                        limpiarCampos ();
                        mostrarAlumnos();
                    } else {
                        
                        JOptionPane.showMessageDialog(this, "No se encontro un alumno con ese DNI.");
                    }
                
            } catch (SQLIntegrityConstraintViolationException e){
                
                JOptionPane.showMessageDialog(this, "No se puede borrar el alumno porque tiene inscripciones actvias . \n" + 
                        "Debe anularlas antes de eliminar al alumno");
            
            } catch (SQLException ex){
                
                JOptionPane.showMessageDialog(this, "Error al borrar alumno: " + ex);
                
            }
        }   
    }
    
    public void darDeAlta (){
        
        int dni;
        int activo = 1;
        try{
            
            dni = Integer.parseInt(jtDni.getText());
            
            
        } catch (NumberFormatException e){
            
            JOptionPane.showMessageDialog(this, "El numero de DNI es Invalido");
            return;
        }
        
        String sql = "UPDATE alumno SET estado = ? WHERE dni = ?";
        
        try (Connection con = (Connection) miConexion.getmiConexion()){
                    PreparedStatement ps = con.prepareStatement(sql);
                    
                    ps.setInt(1, activo);
                    ps.setInt(2, dni);
                    
                    
                    
                    int filas = ps.executeUpdate();
                    
                    if (filas > 0) {
                        
                        JOptionPane.showMessageDialog(this, "Alumno ha sido dado de Alta.");
                        limpiarCampos ();
                        mostrarAlumnos();
                    } else {
                        
                        JOptionPane.showMessageDialog(this, "No se encontor un alumno con ese DNI.");
                    }
                
            } catch (SQLException ex){
                
                JOptionPane.showMessageDialog(this, "Error al dar de alta al alumno: " + ex);
            }
        
    }
    
    public void darDeBaja (){
        int dni;
        int activo = 0;
        try{
            
            dni = Integer.parseInt(jtDni.getText());
            
            
        } catch (NumberFormatException e){
            
            JOptionPane.showMessageDialog(this, "El numero de DNI es Invalido");
            return;
        }
        
        String sql = "UPDATE alumno SET estado = ? WHERE dni = ?";
        
        try (Connection con = (Connection) miConexion.getmiConexion()){
                    PreparedStatement ps = con.prepareStatement(sql);
                    
                    ps.setInt(1, activo);
                    ps.setInt(2, dni);
                    
                    
                    
                    int filas = ps.executeUpdate();
                    
                    if (filas > 0) {
                        
                        JOptionPane.showMessageDialog(this, "Alumno ha sido dado de Baja.");
                        limpiarCampos ();
                        mostrarAlumnos();
                    } else {
                        
                        JOptionPane.showMessageDialog(this, "No se encontor un alumno con ese DNI.");
                    }
                
            } catch (SQLException ex){
                
                JOptionPane.showMessageDialog(this, "Error al dar de baja al alumno: " + ex);
            }
    }
    
    private void limpiarCampos(){
        
        jtNombre.setText("");
        jtApellido.setText("");
        jtDni.setText("");
        jdNacimiento.setDate(null);
        jrInactivo.setSelected(false);
        jrActivo.setSelected(false);
    }
    
    public void mostrarAlumnos (){
        
        modelo.setRowCount(0);
        
        String sql = "SELECT id_Alumno, nombre, apellido, dni, fechaNacimiento, estado FROM alumno";
        
        try (Connection con = (Connection) miConexion.getmiConexion();
               PreparedStatement ps = con.prepareStatement(sql);
               ResultSet resultado = ps.executeQuery() ){
            
            while (resultado.next()){
                
                int id = resultado.getInt("id_Alumno");
                int dni = resultado.getInt("dni");
                String apellido = resultado.getString("apellido");
                String nombre = resultado.getString("nombre");
                Date fecha = resultado.getDate("fechaNacimiento");
                
                String estados; 

                if ( 1 == resultado.getInt("estado")){
                    
                    estados = "Activo";                    
                } else {
                    
                    estados = "Inactivo";
                }
                
                
                modelo.addRow(new Object[]{
                    
                    id, nombre, apellido, dni, fecha, estados
                });  
            }

        } catch (SQLException ex){
            
            JOptionPane.showMessageDialog(this, "Error al mostrar alumnos: " + ex);
        }
    }
}